{"version":3,"sources":["components/todo_item_form.jsx","components/todo_item.jsx","components/todo_list.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoItemForm","props","state","id","taskId","title","done","edit","e","setState","target","value","preventDefault","modifyList","formType","hideForm","this","type","onChange","handleUpdate","onClick","handleSubmit","React","Component","ToDoItem","item","newTask","Object","assign","checked","showAsDone","className","markDone","revealForm","deleteTask","ToDoList","list","count","bind","savedList","localStorage","getItem","parsedList","JSON","parse","task","newList","setItem","stringify","toDoList","values","map","idx","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAoDeA,E,YAjDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,GAAI,EAAKF,MAAMG,OACfC,MAAO,EAAKJ,MAAMI,MAClBC,MAAM,EACNC,MAAM,GANS,E,4EAUH,IAAD,OACb,OAAO,SAACC,GACN,EAAKC,SAAS,CAACJ,MAAOG,EAAEE,OAAOC,W,mCAItBH,GAAI,IAAD,OACd,OAAO,SAACA,GACNA,EAAEI,iBACF,EAAKX,MAAMY,WAAW,EAAKZ,MAAMa,SAAU,EAAKZ,OACpB,SAAxB,EAAKD,MAAMa,UACb,EAAKb,MAAMc,WAEb,EAAKN,SAAS,CACZN,GAAI,EAAKF,MAAMG,OACfC,MAAO,GACPC,MAAM,O,+BAMV,OACE,iCACE,8BACE,yCAAWU,KAAKf,MAAMa,SAAtB,SACE,2BACEG,KAAK,OACLC,SAAUF,KAAKG,eACfR,MAAOK,KAAKd,MAAMG,SAGtB,4BAAQY,KAAK,SAASG,QAASJ,KAAKK,gBAApC,UAAwDL,KAAKf,MAAMa,SAAnE,gB,GA3CiBQ,IAAMC,WCiElBC,E,YA/Db,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXK,MAAM,GAHS,E,0EAOL,IAAD,OACX,OAAO,WACL,EAAKN,MAAMY,WAAW,SAAU,EAAKZ,MAAMwB,S,mCAIjC,IAAD,OACX,OAAO,WACL,EAAKhB,SAAS,CAACF,MAAM,O,iCAIb,IAAD,OACT,OAAO,WACL,EAAKE,SAAS,CAACF,MAAM,O,iCAIb,IAAD,OACT,OAAO,WACL,IAAMmB,EAAUC,OAAOC,OAAO,GAAI,EAAK3B,MAAMwB,MAC7CC,EAAQpB,MAAOoB,EAAQpB,KACvB,EAAKL,MAAMY,WAAW,OAAQa,M,+BAIxB,IACAD,EAAST,KAAKf,MAAdwB,KACFI,EAAUJ,EAAKnB,KAAO,kBAAoB,YAC1CwB,EAAaL,EAAKnB,KAAO,OAAS,GAClCS,EAAWC,KAAKd,MAAMK,KAAO,GAAK,OACxC,OACE,wBAAIwB,UAAS,oBAAeD,IAC1B,yBAAKC,UAAU,SACb,uBAAGA,UAAS,cAASF,GAAWT,QAASJ,KAAKgB,aAC9C,uBAAGD,UAAU,cAAcX,QAASJ,KAAKiB,eACzC,uBAAGF,UAAU,mBAAmBX,QAASJ,KAAKkB,gBAE/CT,EAAKpB,MACN,yBAAK0B,UAAWhB,GACd,yBAAKgB,UAAU,aACb,kBAAC,EAAD,CACEjB,SAAS,OACTD,WAAYG,KAAKf,MAAMY,WACvBR,MAAOoB,EAAKpB,MACZD,OAAQqB,EAAKtB,GACbY,SAAUC,KAAKD,aAEjB,4BAAQK,QAASJ,KAAKD,YAAtB,iB,GAxDWO,IAAMC,WCwDdY,E,YAtDb,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXkC,KAAM,GACNC,MAAO,GAET,EAAKxB,WAAa,EAAKA,WAAWyB,KAAhB,gBAND,E,iFAUjB,IAAMC,EAAYC,aAAaC,QAAQ,QACvC,GAAIF,EAAW,CACb,IAAMG,EAAaC,KAAKC,MAAML,GAC9BvB,KAAKP,SAASiC,M,iCAIPzB,EAAM4B,GACf,IAAMC,EAAUnB,OAAOC,OAAO,GAAIZ,KAAKd,OAC1B,QAATe,GACF4B,EAAK1C,GAAKa,KAAKd,MAAMmC,MACrBS,EAAQV,KAAKS,EAAK1C,IAAM0C,EACxBC,EAAQT,MAAQrB,KAAKd,MAAMmC,MAAQ,GACjB,SAATpB,GACT4B,EAAKtC,MAAO,EACZuC,EAAQV,KAAKS,EAAK1C,IAAM0C,UAEjBC,EAAQV,KAAKS,EAAK1C,IAE3Ba,KAAKP,SAASqC,GACdN,aAAaO,QAAQ,OAAQJ,KAAKK,UAAUF,M,+BAGpC,IAAD,OACDG,EAAWtB,OAAOuB,OAAOlC,KAAKd,MAAMkC,MAAMe,KAAI,SAAC1B,EAAM2B,GACzD,OACE,kBAAC,EAAD,CAAUC,IAAKD,EAAK3B,KAAMA,EAAMZ,WAAY,EAAKA,gBAIrD,OACE,8BACE,0CACA,wBAAIkB,UAAU,aACVkB,GAEJ,kBAAC,EAAD,CAAcnC,SAAS,MAAMT,MAAM,GAAGQ,WAAYG,KAAKH,kB,GA/CxCS,IAAMC,WCQd+B,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5472f0c.chunk.js","sourcesContent":["import React from 'react';\n\nclass ToDoItemForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.taskId,\n      title: this.props.title,\n      done: false,\n      edit: false\n    };\n  }\n\n  handleUpdate() {\n    return (e) => {\n      this.setState({title: e.target.value});\n    };\n  }\n\n  handleSubmit(e) {\n    return (e) => {\n      e.preventDefault();\n      this.props.modifyList(this.props.formType, this.state);\n      if (this.props.formType === \"Edit\") {\n        this.props.hideForm();\n      }\n      this.setState({\n        id: this.props.taskId,\n        title: \"\",\n        done: false\n      });\n    };\n  }\n\n  render() {\n    return (\n      <section>\n        <form>\n          <label>{`${this.props.formType} Task`}\n            <input \n              type=\"text\" \n              onChange={this.handleUpdate()}\n              value={this.state.title}  \n            />\n          </label>\n          <button type=\"submit\" onClick={this.handleSubmit()}>{`${this.props.formType} Task`}</button>\n        </form>\n      </section>\n    )\n  }\n}\n\nexport default ToDoItemForm;","import React from 'react';\nimport ToDoForm from './todo_item_form';\n\nclass ToDoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      edit: false\n    };\n  }\n  \n  deleteTask() {\n    return () => {\n      this.props.modifyList(\"Delete\", this.props.item);\n    };\n  }\n  \n  revealForm() {\n    return () => {\n      this.setState({edit: true});\n    };\n  }\n\n  hideForm() {\n    return () => {\n      this.setState({edit: false});\n    };\n  }\n\n  markDone() {\n    return () => {\n      const newTask = Object.assign({}, this.props.item);\n      newTask.done = newTask.done ? false : true;\n      this.props.modifyList(\"Edit\", newTask);\n    };\n  }\n\n  render() {\n    const { item } = this.props;\n    const checked = item.done ? \"fa-check-square\" : \"fa-square\";\n    const showAsDone = item.done ? \"done\" : \"\";\n    const hideForm = this.state.edit ? \"\" : \"hide\";\n    return (\n      <li className={`task-item ${showAsDone}`}>\n        <div className=\"icons\">\n          <i className={`far ${checked}`} onClick={this.markDone()}></i>\n          <i className=\"fas fa-edit\" onClick={this.revealForm()}></i>\n          <i className=\"fas fa-trash-alt\" onClick={this.deleteTask()}></i>\n        </div>\n        {item.title}\n        <div className={hideForm} >\n          <div className=\"edit-form\">\n            <ToDoForm \n              formType=\"Edit\" \n              modifyList={this.props.modifyList} \n              title={item.title} \n              taskId={item.id} \n              hideForm={this.hideForm()}\n              />\n            <button onClick={this.hideForm()}>Cancel</button>\n          </div>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default ToDoItem;","import React from 'react';\nimport ToDoItemForm from './todo_item_form';\nimport ToDoItem from './todo_item';\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: {}, \n      count: 0\n    };\n    this.modifyList = this.modifyList.bind(this);\n  }\n\n  componentDidMount() {\n    const savedList = localStorage.getItem('list');\n    if (savedList) {\n      const parsedList = JSON.parse(savedList);\n      this.setState(parsedList);\n    } \n  }\n  \n  modifyList(type, task) {\n    const newList = Object.assign({}, this.state);\n    if (type === \"Add\") {\n      task.id = this.state.count;\n      newList.list[task.id] = task;\n      newList.count = this.state.count + 1;\n    } else if (type === \"Edit\") {\n      task.edit = false;\n      newList.list[task.id] = task;\n    } else {\n      delete newList.list[task.id];\n    }\n    this.setState(newList);\n    localStorage.setItem('list', JSON.stringify(newList));  \n  }\n\n  render() {\n    const toDoList = Object.values(this.state.list).map((item, idx) => {\n      return (\n        <ToDoItem key={idx} item={item} modifyList={this.modifyList}/>\n      )\n    });\n    \n    return (\n      <main>\n        <h1>To-Do List</h1>\n        <ul className=\"todo-list\">\n          { toDoList }\n        </ul>\n        <ToDoItemForm formType=\"Add\" title=\"\" modifyList={this.modifyList} />\n      </main>\n    )\n  }\n\n\n}\n\nexport default ToDoList;","import React from 'react';\nimport './stylesheets/app.scss';\nimport ToDoList from './components/todo_list';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}